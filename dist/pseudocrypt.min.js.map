{"version":3,"file":"pseudocrypt.min.js","sources":["../index.js"],"sourcesContent":["/**\r\n * PseudoCrypt — Short, reversible, pseudo-unique hashes for numeric values.\r\n * Inspired by KevBurnsJr's original PHP implementation: \r\n * https://web.archive.org/web/20130727034425/http://blog.kevburnsjr.com/php-unique-hash\r\n *\r\n * Author: Tanish Raj (@cttricks)\r\n * License: MIT\r\n * Repository: https://github.com/cttricks/pseudocrypt\r\n *\r\n * This module provides two main functions:\r\n * - encode: Convert a number into a pseudo-unique base62-like string\r\n * - decode: Retrieve the original number from the encoded string\r\n *\r\n * ⚠️ Not cryptographically secure. Use only for ID obfuscation, pretty URLs, etc.\r\n */\r\n\r\nconst goldenPrimes = {\r\n    1: '1',\r\n    41: '59',\r\n    2377: '1677',\r\n    147299: '187507',\r\n    9132313: '5952585',\r\n    566201239: '643566407',\r\n    35104476161: '22071637057',\r\n    2176477521929: '294289236153',\r\n    134941606358731: '88879354792675',\r\n    8366379594239857: '7275288500431249',\r\n    518715534842869223: '280042546585394647'\r\n};\r\n\r\nconst chars62 = [\r\n    ...Array.from({ length: 10 }, (_, i) => 48 + i), // 0-9\r\n    ...Array.from({ length: 26 }, (_, i) => 65 + i), // A-Z\r\n    ...Array.from({ length: 26 }, (_, i) => 97 + i)  // a-z\r\n];\r\n\r\nconst base62 = (int) => {\r\n    int = BigInt(int);\r\n    let str = '';\r\n    const base = BigInt(62);\r\n    while (int > 0) {\r\n        const mod = int % base;\r\n        str += String.fromCharCode(chars62[Number(mod)]);\r\n        int = int / base;\r\n    }\r\n    return str.split('').reverse().join('');\r\n};\r\n\r\nconst unBase62 = (str) => {\r\n    return [...str].reverse().reduce((acc, char, i) => {\r\n        const val = BigInt(chars62.indexOf(char.charCodeAt(0)));\r\n        return acc + val * (BigInt(62) ** BigInt(i));\r\n    }, BigInt(0));\r\n};\r\n\r\n/**\r\n * Encodes a number into a short, base62-like hash string.\r\n * Useful for generating pseudo-unique, URL-safe identifiers.\r\n *\r\n * @param {number | string | bigint} num - The numeric value to encode.\r\n * @param {number} [len=5] - The desired length of the output hash. Must be between 1 and 10.\r\n * @returns {string} Encoded hash string.\r\n *\r\n * @example\r\n * const shortId = encode(123456); // e.g. \"4Gze1\"\r\n */\r\n\r\nconst encode = (num, len = 5) => {\r\n    num = BigInt(num);\r\n    const ceil = BigInt(62) ** BigInt(len);\r\n    const prime = BigInt(Object.keys(goldenPrimes)[len]);\r\n    const hashed = (num * prime) % ceil;\r\n    return base62(hashed).padStart(len, '0');\r\n};\r\n\r\n/**\r\n * Decodes a hash string back into its original numeric value.\r\n *\r\n * @param {string} hash - The encoded hash string (must be generated by `encode()`).\r\n * @returns {bigint} Original numeric value.\r\n *\r\n * @example\r\n * const original = decode(\"4Gze1\"); // 123456n\r\n */\r\nconst decode = (hash) => {\r\n    const len = hash.length;\r\n    const ceil = BigInt(62) ** BigInt(len);\r\n    const mmi = BigInt(Object.values(goldenPrimes)[len]);\r\n    const val = unBase62(hash);\r\n    return (val * mmi) % ceil;\r\n};\r\n\r\nmodule.exports = { encode, decode };\r\n"],"names":["goldenPrimes","chars62","Array","from","length","_","i","module","exports","encode","num","len","BigInt","ceil","int","str","base","mod","String","fromCharCode","Number","split","reverse","join","base62","Object","keys","padStart","decode","hash","mmi","values","reduce","acc","char","indexOf","charCodeAt"],"mappings":"2FAgBA,MAAMA,EAAe,CACjB,EAAG,IACH,GAAI,KACJ,KAAM,OACN,OAAQ,SACR,QAAS,UACT,UAAW,YACX,YAAa,cACb,cAAe,eACf,gBAAiB,iBACjB,iBAAkB,mBAClB,mBAAoB,sBAGlBC,EAAU,IACTC,MAAMC,KAAK,CAAEC,OAAQ,KAAM,CAACC,EAAGC,IAAM,GAAKA,OAC1CJ,MAAMC,KAAK,CAAEC,OAAQ,KAAM,CAACC,EAAGC,IAAM,GAAKA,OAC1CJ,MAAMC,KAAK,CAAEC,OAAQ,KAAM,CAACC,EAAGC,IAAM,GAAKA,KA2DjDC,OAAOC,QAAU,CAAEC,OAzBJ,CAACC,EAAKC,EAAM,KACvBD,EAAME,OAAOF,GACb,MAAMG,EAAOD,OAAO,KAAOA,OAAOD,GAGlC,MApCW,CAACG,IACZA,EAAMF,OAAOE,GACb,IAAIC,EAAM,GACV,MAAMC,EAAOJ,OAAO,IACpB,KAAOE,EAAM,GAAG,CACZ,MAAMG,EAAMH,EAAME,EAClBD,GAAOG,OAAOC,aAAalB,EAAQmB,OAAOH,KAC1CH,GAAYE,CACf,CACD,OAAOD,EAAIM,MAAM,IAAIC,UAAUC,KAAK,GAAG,EA2BhCC,CADSd,EADFE,OAAOa,OAAOC,KAAK1B,GAAcW,IAChBE,GACTc,SAAShB,EAAK,IAAI,EAoBjBiB,OARXC,IACZ,MAAMlB,EAAMkB,EAAKzB,OACXS,EAAOD,OAAO,KAAOA,OAAOD,GAC5BmB,EAAMlB,OAAOa,OAAOM,OAAO/B,GAAcW,IAvClC,IAACI,EAyCd,OAzCcA,EAwCOc,EAvCd,IAAId,GAAKO,UAAUU,QAAO,CAACC,EAAKC,EAAM5B,IAElC2B,EADKrB,OAAOX,EAAQkC,QAAQD,EAAKE,WAAW,KAC/BxB,OAAO,KAAOA,OAAON,IAC1CM,OAAO,KAqCIkB,EAAOjB,CAAI"}